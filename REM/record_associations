"""
REM records association classes and functions.
"""

import pandas as pd

from REM.client import logger, settings, user
import REM.database as mod_db
import REM.data_manipulation as mod_dm


class AssociationEntry:
    """
    Manages the relationship between records.

    Attributes:
        name (str): name of the association entry.

        title (str): display name of the association.

        permissions (dict): mapping of permission rules to permission groups

        association_type (str): the association type. Can be one of OO (one-to-one), OM (one-to-many), or MM
            (many-to-many).

        junction (str): optional junction table to use for querying.

        entities (dict): association entity descriptions and parameters.
    """

    def __init__(self, name, entry):
        """
        Initialize association attributes.

        Arguments:
            name (str): name of the association entry.

            entry (dict): configuration entry for the association.
        """
        self.name = name

        try:
            self.title = entry['Title']
        except KeyError:
            self.title = self.name

        try:
            permissions = entry['Permissions']
        except KeyError:
            self.permissions = {'create': None, 'edit': None, 'delete': None}
        else:
            self.permissions = {'create': permissions.get('Create', None),
                                'edit': permissions.get('Edit', None),
                                'delete': permissions.get('Delete', None),
                                }

        try:
            association_type = entry['AssociationType']
        except KeyError:
            raise AttributeError('missing required configuration field "AssociationType"')
        else:
            if association_type in ['OO', 'OM', 'MM']:
                self.association_type = association_type
            else:
                raise AttributeError('"AssociationType" must be one of "OO", "OM", or "MM"')

        # Database import rules
        try:
            self.junction = entry['JunctionTable']
        except KeyError:
            self.junction = None

        # Records participating in the association
        try:
            entities = entry['Entities']
        except KeyError:
            raise AttributeError('missing required configuration field "Entities"')

        primary_set = False
        self.entities = []
        for record_type in entities:
            entity_desc = entities[record_type]
            entity = AssociationEntity(record_type, entity_desc)

            is_primary = entity.primary
            if is_primary:
                if primary_set:
                    raise AttributeError('Failed to set entity {ENT} as the primary entity - another entity has '
                                         'already been configured as the primary entity'.format(ENT=record_type))
                else:
                    primary_set = True

            self.entities.append(entity)

        if not primary_set:
            raise AttributeError('Association {NAME} requires at least one participating primary entity'
                                 .format(NAME=self.name))

    def _delete_entry(self):
        """
        Delete a reference entry from the junction table.
        """
        pass

    def _null_entity(self):
        """
        Nullify relevant fields of the reference entry in the primary association entity.
        """
        pass

    def _update_entry(self, record_type, ref_data, statements: dict = None):
        """
        Update a reference entry in the junction table or create a new entry if one does not exist yet.
        """
        if statements is None:
            statements = {}

        if isinstance(ref_data, pd.DataFrame):
            df = ref_data
        elif isinstance(ref_data, pd.Series):
            df = ref_data.to_frame().transpose()
        elif isinstance(ref_data, dict):
            df = pd.DataFrame(ref_data)
        else:
            raise ValueError('ref_data must be one of DataFrame, Series, or dictionary')

        entity = self.fetch_entity(record_type)
        try:
            is_primary = entity.primary
        except AttributeError:
            msg = '{TYPE} is not a participating entity in the association'.format(TYPE=record_type)
            logger.exception('RecordGroup {NAME}: {MSG}'.format(NAME=self.name, MSG=msg))

            raise ImportError(msg)

        reference_table = self.junction
        if is_primary:  # input record is the primary record ID
            export_col_map = {'RecordID': 'DocNo', 'ReferenceID': 'RefNo', 'ReferenceDate': 'RefDate',
                              'RecordType': 'DocType', 'ReferenceType': 'RefType', 'ReferenceNotes': 'Notes',
                              'ReferenceWarnings': 'Warnings', 'IsApproved': 'IsApproved', 'IsChild': 'IsChild',
                              'IsHardLink': 'IsHardLink', 'IsDeleted': 'IsDeleted'}
        else:  # reference record is the primary record ID
            export_col_map = {'ReferenceID': 'DocNo', 'RecordID': 'RefNo', 'ReferenceDate': 'RefDate',
                              'ReferenceType': 'DocType', 'RecordType': 'RefType', 'ReferenceNotes': 'Notes',
                              'ReferenceWarnings': 'Warnings', 'IsApproved': 'IsApproved', 'IsChild': 'IsChild',
                              'IsHardLink': 'IsHardLink', 'IsDeleted': 'IsDeleted'}

        # Remove rows where the primary column is NULL
        df.drop(df[(df['RecordID'].isna()) | (df['ReferenceID'].isna())].index, inplace=True)
        if df.empty:
            logger.warning('RecordType {NAME}: no reference entries provided for saving'.format(NAME=self.name))
            return statements

        # Prepare separate update and insert statements depending on whether an individual reference entry exists
        export_df = df[[i for i in export_col_map if i in df.columns]].rename(columns=export_col_map)

        # Prepare the upsert statement
        export_columns = export_df.columns.tolist()
        export_values = [tuple(i) for i in export_df.values.tolist()]

        match_on = [export_col_map[i] for i in ('RecordID', 'ReferenceID')]
        statements = mod_db.prepare_sql_upsert(reference_table, export_columns, export_values, match_on,
                                               statements=statements)

        return statements

    def _update_entity(self):
        """
        Update relevant reference fields in the primary association entity.
        """
        pass

    def _format_query(self):
        """
        Depending on the association type, either use the import rules of the primary association entity or the
        junction table to prepare the query target.
        """
        pass

    def _get_db_col(self, col):
        """

        """
        mapper = {j: i for i, j in self.mapper.items()}
        db_col = mapper[col]

        return db_col

    def _prepare_import_columns(self, primary: bool = True):
        """

        """
        mapper = self.mapper

        if primary:  # input records are the primary record IDs
            columns = ['{} AS RecordID'.format(self.primary_key), '{} AS ReferenceID'.format(self.secondary_key)]
        else:  # input records are the reference record ID
            columns = ['{} AS RecordID'.format(self.secondary_key), '{} AS ReferenceID'.format(self.primary_key)]
        columns.extend(['{COL} AS {ALIAS}'.format(COL=i, ALIAS=j) for i, j in mapper.items()])

        return columns

    def fetch_entity(self, identifier=None):
        """
        Fetch the relevant entity configuration using the provided identifier. If no entity name provided, will return
        the primary entity.

        Arguments:
            identifier (str): retrieve an associated entity by its name. Will retrieve the primary entity if an
                identifier is not provided.
        """
        entities = self.entities

        entity = None
        if identifier:
            identifiers = [i.name for i in entities]
        else:  # retrieve primary entity
            identifier = True
            identifiers = [i.primary for i in entities]

        if identifier in identifiers:
            index = identifiers.index(identifier)
            entity = entities[index]

        return entity

    def is_dependent(self, record_type):
        """
        Checks the participation of an entity to determine if the entity is in a dependence relationship.
        """
        entity = self.fetch_entity(record_type)
        try:
            participation = entity.participation
        except AttributeError:
            return False

        if self.association_type == 'OO' and participation == 1:
            return True
        else:
            return False

    def is_child(self, record_type):
        """
        Checks the participation and type of association to determine if the entity is the child of another entity.
        """
        entity = self.fetch_entity(record_type)
        try:
            participation = entity.participation
        except AttributeError:
            return False

        if self.association_type == 'OM' and participation == 1:
            return True
        else:
            return False

    def import_reference_entries(self, record_type, record_ids, deleted: bool = False):
        """
        Import a record's association.

        Arguments:
            record_type (str): Association entity that the record belong to.

            record_ids (list): list of record IDs to query.

            deleted (bool): include deleted reference entries when importing.
        """
        entity = self.fetch_entity(record_type)
        primary = self.fetch_entity()
        mapper = self.mapper

        if isinstance(record_ids, str):
            record_ids = [record_ids]
        elif isinstance(record_ids, pd.Series):
            record_ids = record_ids.tolist()
        elif isinstance(record_ids, pd.DataFrame):
            try:
                record_ids = record_ids['RecordID'].tolist()
            except KeyError:
                msg = 'failed to import reference entries - the provided dataframe is missing required column "{COL}"' \
                    .format(COL='RecordID')
                logger.error('RecordGroup {NAME}: {MSG}'.format(NAME=self.name, MSG=msg))

                raise ImportError(msg)
        else:
            record_ids = record_ids

        # Remove duplicate IDs
        record_ids = list(set(record_ids))

        # Prepare the import data
        df_cols = ['RecordID', 'ReferenceID'] + list(mapper.values())
        df = pd.DataFrame(columns=df_cols)
        reference_table = self.junction

        is_primary = entity.primary
        if is_primary:  # input records are the primary record IDs
            columns = ['{} AS RecordID'.format(self.primary_key), '{} AS ReferenceID'.format(self.secondary_key)]
            filter_str = '{KEY} IN ({VALS})'
            filter_col = self.primary_key
            reference_type = None
        else:  # input records are the reference record ID
            columns = ['{} AS RecordID'.format(self.secondary_key), '{} AS ReferenceID'.format(self.primary_key)]
            filter_str = '{KEY} IN ({VALS})'
            filter_col = self.secondary_key
            reference_type = primary.name
        columns.extend(['{COL} AS {ALIAS}'.format(COL=i, ALIAS=j) for i, j in mapper.items()])

        # Import reference entries related to record_id
        for i in range(0, len(record_ids), 1000):  # split into sets of 1000 to prevent max parameter errors in SQL
            sub_ids = record_ids[i: i + 1000]
            sub_vals = ','.join(['?' for _ in sub_ids])

            filters = [(filter_str.format(KEY=filter_col, VALS=sub_vals), tuple(sub_ids))]
            if not deleted:
                filters.append(('{} = ?'.format(self._get_db_col('IsDeleted')), 0))

            import_df = user.read_db(*mod_db.prepare_sql_query(reference_table, columns=columns,
                                                               filter_rules=filters), prog_db=True)
            df = df.append(import_df, ignore_index=True)

        return df

    def load_reference_records(self, entity, record_ids):
        """
        Load all references of the specified records belonging to the association entity.
        """
        pass

    def load_unreferenced_records(self, record_type, junction_table: str = None):
        """
        Load records of the given association entity that are not referenced. If a junction table is provided, the
        junction table will first be joined with primary entities import tables and then entries with null references
        selected, otherwise null referenced entries will selected from the primary entities import tables directly.
        """
        entity = self.fetch_entity(record_type)
        record_entry = settings.records.fetch_entry(record_type)
        import_rules = record_entry.import_rules

        # Import reference entries related to record_id
        filters = mod_db.format_import_filters(import_rules)

        if entity.primary:
            null_col = mapper['ReferenceID']
        else:
            null_col = mapper['RecordID']

        if junction_table:
            table_statement = entity._join_junction(junction_table)
            filters_clause = '{TBL}.{COL} IS NULL'.format(TBL=junction_table, COL=null_col)
        else:
            columns = record_entry._format_import_columns(import_rules)
            table_statement = mod_db.format_tables(import_rules)
            ref_col = mod_db.get_import_column(import_rules, 'ReferenceID')
            filters_clause = '{COL} IS NULL'.format(COL=ref_col)

        filters.append(filters_clause)

        import_df = user.read_db(*mod_db.prepare_sql_query(table_statement, columns=columns, filter_rules=filters),
                                 prog_db=True)

        return import_df

    def save(self, ref_data, statements: dict = None):
        """
        Prepare to save database references.

        Arguments:
            ref_data (DataFrame): reference entries to save to the database table specified by the association rule.

            statements (dict): optional dictionary of transactions statements to append to.

        Returns:
            statements (dict): dictionary of transactions statements.
        """
        if statements is None:
            statements = {}

        pass

    def delete(self, ref_data, statements: dict = None):
        """
        Prepare to delete database reference entries from the database.

        Arguments:
            ref_data (DataFrame): reference entries to delete from the database table specified by the association rule.

            statements (dict): optional dictionary of transactions statements to append to.

        Returns:
            statements (dict): dictionary of transactions statements.
        """
        if statements is None:
            statements = {}

        pass


class AssociationEntity:
    """
    Attributes:
        name (str): name of the association entity.

        primary (bool): entity is the primary entity in an association [default: False].

        participation (int): entities participation level in an association. Participation can be one of 0 (optional),
            1 (mandatory), or 2 (conditional).

        condition (str): condition string describing when an entity can be considered as a participant in an
            association.
    """

    def __init__(self, name, entry):
        """
        Initialize association attributes.

        Arguments:
            name (str): name of the association entity.

            entry (dict): configuration entry for the association entity.
        """
        self.name = name

        try:
            self.primary = bool(int(entry['Primary']))
        except KeyError:
            self.primary = False  # default is not primary entity
        except ValueError:
            raise AttributeError('Unknown "Primary" value configured for the association entity {ENT} - '
                                 'value must be one of either 0 (False) or 1 (True)'.format(ENT=name))

        try:
            participation = int(entry['Participation'])
        except KeyError:
            participation = 0  # default is optional participation
        except ValueError:
            raise AttributeError('Unknown "Participation" value configured for the association entity {ENT} - '
                                 'value must be one of either 0 (optional), 1 (mandatory), or 2 '
                                 '(conditional)'.format(ENT=name))
        else:
            if participation not in (0, 1, 2):
                raise AttributeError('Unknown "Participation" value configured for the association entity {ENT} - '
                                     'value must be one of either 0 (optional), 1 (mandatory), or 2 '
                                     '(conditional)'.format(ENT=name))
        self.participation = participation

        if participation == 2:
            try:
                self.condition = entry['Condition']
            except KeyError:
                raise AttributeError('Missing required "Condition" parameter for association entity {ENT} - a '
                                     'condition string must be provided when participation is set to 2 '
                                     '(conditional participation)'.format(ENT=name))
        else:
            self.condition = None

    def _join_junction(self, reference_table):
        """
        Join a junction table with the primary association entity tables.
        """
        record_entry = settings.records.fetch_entry(self.name)
        import_rules = record_entry.import_rules

        is_primary = self.primary
        if is_primary:  # records are the primary in the reference table
            import_col_map = {'RecordID': 'DocNo', 'ReferenceID': 'RefNo', 'Deleted': 'IsDeleted'}
        else:  # reference record is the primary record ID
            import_col_map = {'RecordID': 'RefNo', 'ReferenceID': 'DocNo', 'Deleted': 'IsDeleted'}

        # Import reference entries related to record_id
        db_id_col = mod_db.get_import_column(import_rules, 'RecordID')

        join_statement = "{COL} = {TBL}.{REFCOL} AND {TBL}.{DELCOL} = '0'" \
            .format(COL=db_id_col, TBL=reference_table, REFCOL=import_col_map['RecordID'],
                    DELCOL=import_col_map['Deleted'])
        import_rules[reference_table] = {'Columns': {import_col_map['RecordID']: import_col_map['RecordID']},
                                         'Join': ["LEFT JOIN", join_statement]}

        table_statement = mod_db.format_tables(import_rules)

        return table_statement

    def is_participant(self, record_values):
        """
        Checks whether an entity meets the requirements to participate in the association. An entity is a participant if
        its participation is set to 0 or 1 or participation is set to 2 and the specified conditions are met.
        """
        participation = self.participation
        if participation in (0, 1):
            return True
        else:  # check participation conditions
            condition = self.condition
            conds_met = mod_dm.evaluate_condition(record_values, condition).squeeze()
            if conds_met:
                return True
            else:
                return False

